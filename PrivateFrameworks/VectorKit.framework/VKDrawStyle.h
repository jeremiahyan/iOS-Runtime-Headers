/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKDrawStyle : NSObject {
    struct StyleData { 
        struct { 
            unsigned int width : 1; 
            unsigned int strokeWidth : 1; 
            unsigned int fillColor : 1; 
            unsigned int strokeColor : 1; 
            unsigned int fillTexture : 1; 
            unsigned int obscuredFillTexture : 1; 
            unsigned int travelledFillTexture : 1; 
            unsigned int buildingStrokeWidth3d : 1; 
            unsigned int buildingStrokeColor3d : 1; 
            unsigned int brightness : 1; 
            unsigned int puckCircleBrightness : 1; 
            unsigned int puckArrowBrightness : 1; 
            unsigned int puckArrowColor : 1; 
            unsigned int puckArrowColorStale : 1; 
            unsigned int puckSize : 1; 
            unsigned int puckOffset : 1; 
            unsigned int shieldFillColor : 1; 
        } hasValueInStylesheet; 
        struct map<gss::PropertyID, signed char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, signed char> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, signed char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, signed char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, signed char> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, signed char>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, signed char>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, signed char>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _boolMap; 
        struct map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, float>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, float> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _floatMap; 
        struct map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned char> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _uint8Map; 
        struct map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, int> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _intMap; 
        struct map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned int> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _uintMap; 
        struct map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _colorMap; 
        struct map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _stringMap; 
        struct map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair> > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair> > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _pairMap; 
        struct map<gss::PropertyID, gss::SparseRamp<signed char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<signed char> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<signed char> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _boolRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _floatRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _uint8RampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _intRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _uintRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _colorRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _stringRampMap; 
        struct map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _pairRampMap; 
        struct map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > { 
            struct __tree<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > { 
                struct __tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _linePatternMap; 
        struct map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData> > > { 
            struct __tree<std::__1::__value_type<int, gss::StyleData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, gss::StyleData> > > { 
                struct __tree_node<std::__1::__value_type<int, gss::StyleData>, void *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, gss::StyleData>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __first_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true> > { 
                    unsigned long __first_; 
                } __pair3_; 
            } __tree_; 
        } _subStyleDataMap; 
    } _internal;
    VKCartoStyle *_sourceStyle;
    VKStyleManager *_styleManager;
}

@property (nonatomic, readonly) float blendingFactor;
@property (nonatomic, readonly) id variant;

+ (int)renderStyleID;

- (id).cxx_construct;
- (void).cxx_destruct;
- (float)blendingFactor;
- (void)clearSourceStyle;
- (id)initWithStyle:(id)arg1 manager:(id)arg2;
- (id)sourceStyle;
- (id)styleName;
- (void)takeFromStyleProperties:(id)arg1 atZoom:(unsigned int)arg2 globals:(id)arg3;
- (void)takeFromZoomInvariantProperties:(id)arg1;
- (id)variant;

@end
