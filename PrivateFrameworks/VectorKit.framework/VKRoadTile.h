/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRoadTile : VKVectorTile {
    struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer> > { 
        struct __compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer> > { 
            struct PatternedLayer {} *__first_; 
        } __ptr_; 
    } _patternedRibbonLayer;
    struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer> > { 
        struct __compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> > { 
            struct RoadLayer {} *__first_; 
        } __ptr_; 
    } _roadLayer;
    VKTrafficTile *_trafficTile;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{PatternedLayer=^^?{vector<vk::PatternedBatch *' */ struct *patternedRibbonLayer; /* unknown property attribute:  std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[2{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{PatternedManager}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{RoadLayer=^^?{vector<vk::RoadBatch *' */ struct *roadLayer; /* unknown property attribute:  std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[4^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[4{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{RoadManager}@} */
@property (nonatomic, retain) VKTrafficTile *trafficTile;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addPatternedRibbonTo:(struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > >, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::hash<vk::PatternedBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::equal_to<vk::PatternedBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5;
- (void)addRoadRibbonTo:(struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > >, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5 startCap:(bool)arg6 endCap:(bool)arg7;
- (void)buildGglMeshesWithDevice:(struct Device { int (**x1)(); int x2; }*)arg1;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(float)arg5 device:(struct Device { int (**x1)(); int x2; }*)arg6;
- (struct PatternedLayer { int (**x1)(); struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *> > { struct PatternedBatch {} **x_2_1_1; struct PatternedBatch {} **x_2_1_2; struct __compressed_pair<vk::PatternedBatch **, std::__1::allocator<vk::PatternedBatch *> > { struct PatternedBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[2]; unsigned int x7; struct PatternedManager {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; long x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void x23; void*x24; SEL x25; SEL x26; void*x27; out void*x28; double x29; bool x30; void*x31; void*x32; BOOL x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; short x40; void*x41; double x42; SEL x43; SEL x44; void*x45; void*x46; void*x47; SEL x48; SEL x49; void x50; void*x51; BOOL x52; void*x53; out const void*x54; short x55; void*x56; double x57; SEL x58; SEL x59; void*x60; void*x61; void*x62; SEL x63; SEL x64; void*x65; in int x66; long long x67; void*x68; void*x69; void*x70; void*x71; void*x72; const void*x73; void x74; void*x75; SEL x76; SEL x77; void*x78; out void*x79; double x80; void*x81; int x82; unsigned int x83/* : ? */; unsigned int x84/* : ? */; out in void*x85; void*x86; short x87; void*x88; double x89; SEL x90; SEL x91; void*x92; void*x93; void*x94; SEL x95; SEL x96; double x97; void*x98; float x99; void*x100; void*x101; long x102; void*x103; void*x104; double x105; void*x106; long x107; void*x108; void*x109; void*x110; void*x111; void x112; void*x113; SEL x114; SEL x115; void*x116; out void*x117; double x118; void*x119; int x120; unsigned int x121/* : ? */; unsigned int x122/* : ? */; out in void*x123; void*x124; void*x125; void*x126; void*x127; short x128; void*x129; double x130; SEL x131; SEL x132; void*x133; void*x134; void*x135; SEL x136; SEL x137; void*x138; long x139; long x140; out BOOL x141; void*x142; void*x143; out const void*x144; short x145; void*x146; double x147; SEL x148; SEL x149; void*x150; void*x151; void*x152; SEL x153; SEL x154; void*x155; in int x156; long long x157; void*x158; void*x159; void*x160; void*x161; void*x162; const void*x163; void x164; void*x165; SEL x166; SEL x167; void*x168; out void*x169; double x170; void*x171; int x172; unsigned int x173/* : ? */; unsigned int x174/* : ? */; out in void*x175; void*x176; short x177; void*x178; double x179; SEL x180; SEL x181; void*x182; void*x183; void*x184; SEL x185; SEL x186; double x187; void*x188; float x189; void*x190; void*x191; long x192; void*x193; void*x194; double x195; void*x196; long x197; void*x198; void*x199; void*x200; void*x201; void x202; void*x203; SEL x204; SEL x205; void*x206; out void*x207; double x208; void*x209; int x210; unsigned int x211/* : ? */; unsigned int x212/* : ? */; out in void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; short x224; void*x225; double x226; SEL x227; SEL x228; void*x229; void*x230; void*x231; SEL x232; SEL x233; void*x234; long long x235; void*x236; void*x237; long x238; void*x239; void*x240; out void*x241; void x242; void*x243; SEL x244; SEL x245; void*x246; out void*x247; double x248; bool x249; void*x250; void*x251; BOOL x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; const void*x261; void*x262; void*x263; void*x264; void*x265; short x266; void*x267; double x268; SEL x269; SEL x270; void*x271; void*x272; void*x273; SEL x274; SEL x275; void*x276; long x277; long x278; out BOOL x279; void*x280; void*x281; out const void*x282; short x283; void*x284; double x285; SEL x286; SEL x287; void*x288; void*x289; void*x290; SEL x291; SEL x292; void*x293; void*x294; void*x295; void*x296; short x297; void*x298; void*x299; void x300; void*x301; long x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void x311; void*x312; SEL x313; SEL x314; void*x315; out void*x316; double x317; bool x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; double x329; SEL x330; SEL x331; void*x332; void*x333; void*x334; SEL x335; SEL x336; void x337; void*x338; BOOL x339; void*x340; out const void*x341; short x342; void*x343; double x344; SEL x345; SEL x346; void*x347; void*x348; void*x349; SEL x350; SEL x351; void*x352; in int x353; long long x354; void*x355; void*x356; void*x357; void*x358; void*x359; const void*x360; void x361; void*x362; SEL x363; SEL x364; void*x365; out void*x366; double x367; void*x368; int x369; unsigned int x370/* : ? */; unsigned int x371/* : ? */; out in void*x372; void*x373; short x374; void*x375; double x376; SEL x377; SEL x378; void*x379; void*x380; void*x381; SEL x382; SEL x383; double x384; void*x385; float x386; void*x387; void*x388; long x389; void*x390; void*x391; double x392; void*x393; long x394; void*x395; void*x396; void*x397; void*x398; void x399; void*x400; SEL x401; SEL x402; void*x403; out void*x404; double x405; void*x406; int x407; unsigned int x408/* : ? */; unsigned int x409/* : ? */; out in void*x410; void*x411; void*x412; void*x413; void*x414; short x415; void*x416; double x417; SEL x418; SEL x419; void*x420; void*x421; void*x422; SEL x423; SEL x424; void*x425; long x426; long x427; out BOOL x428; void*x429; void*x430; out const void*x431; short x432; void*x433; double x434; SEL x435; SEL x436; void*x437; void*x438; void*x439; SEL x440; SEL x441; void*x442; in int x443; long long x444; void*x445; void*x446; void*x447; void*x448; void*x449; const void*x450; void x451; void*x452; SEL x453; SEL x454; void*x455; out void*x456; double x457; void*x458; int x459; unsigned int x460/* : ? */; unsigned int x461/* : ? */; out in void*x462; void*x463; short x464; void*x465; double x466; SEL x467; SEL x468; void*x469; void*x470; void*x471; SEL x472; SEL x473; double x474; void*x475; float x476; void*x477; void*x478; long x479; void*x480; void*x481; double x482; void*x483; long x484; void*x485; void*x486; void*x487; void*x488; void x489; void*x490; SEL x491; SEL x492; void*x493; out void*x494; double x495; void*x496; int x497; unsigned int x498/* : ? */; unsigned int x499/* : ? */; out in void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; SEL x523; void*x524; long x525; long x526; out BOOL x527; void*x528; void*x529; out const void*x530; short x531; void*x532; double x533; SEL x534; SEL x535; void*x536; void*x537; void*x538; SEL x539; SEL x540; void*x541; in int x542; long long x543; void*x544; void*x545; void*x546; void*x547; void*x548; const void*x549; void x550; void*x551; SEL x552; SEL x553; void*x554; void*x555; void*x556; void*x557; void*x558; const in void*x559; double x560; void*x561; int x562; unsigned int x563/* : ? */; unsigned int x564/* : ? */; out in void*x565; void*x566; short x567; void*x568; double x569; SEL x570; SEL x571; void*x572; void*x573; void*x574; SEL x575; SEL x576; double x577; void*x578; float x579; void*x580; void*x581; long x582; void*x583; void*x584; double x585; void*x586; long x587; void*x588; void*x589; void*x590; void*x591; void x592; void*x593; SEL x594; SEL x595; void*x596; void*x597; void*x598; void*x599; void*x600; const in void*x601; double x602; void*x603; int x604; unsigned int x605/* : ? */; unsigned int x606/* : ? */; out in void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; void*x621; }*)patternedRibbonLayer;
- (struct RoadLayer { int (**x1)(); struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_2_1_1; struct RoadBatch {} **x_2_1_2; struct __compressed_pair<vk::RoadBatch **, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[4]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[4]; unsigned int x7; struct RoadManager {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; int x21; void*x22; in void*x23; void*x24; void*x25; out void*x26; unsigned int x27/* : ? */; void*x28; void*x29; void*x30; BOOL x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; out void*x41; SEL x42; void*x43; SEL x44; void*x45; void*x46; void*x47; const void*x48; void*x49; void*x50; long x51; void*x52; void*x53; void*x54; void*x55; void*x56; short x57; void*x58; void*x59; void*x60; void*x61; void*x62; out void*x63; unsigned int x64/* : ? */; void*x65; void*x66; void*x67; BOOL x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; out void*x78; SEL x79; void*x80; SEL x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; short x89; void*x90; void*x91; void*x92; void*x93; void*x94; out void*x95; unsigned int x96/* : ? */; void*x97; void*x98; void*x99; BOOL x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; out void*x110; SEL x111; void*x112; SEL x113; void*x114; void*x115; void*x116; void*x117; void*x118; long long x119; void*x120; void*x121; void*x122; void*x123; void*x124; long x125; void*x126; void*x127; void*x128; out void*x129; unsigned int x130/* : ? */; void*x131; void*x132; void*x133; BOOL x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; short x146; void*x147; void*x148; void*x149; double x150; void*x151; SEL x152; void*x153; SEL x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; SEL x162; void*x163; SEL x164; void*x165; long x166; void*x167; void*x168; void*x169; short x170; void*x171; short x172; void*x173; void*x174; void*x175; void*x176; void*x177; short x178; void*x179; short x180; void*x181; SEL x182; void*x183; SEL x184; void*x185; void*x186; void*x187; const void*x188; out void*x189; void*x190; void*x191; void*x192; void*x193; const void*x194; void*x195; void*x196; void*x197; void*x198; unsigned int x199; void*x200; long doublex201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; const void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; struct x224; void*x225; void*x226; void*x227; void*x228; void*x229; in void*x230; short x231; void*x232; int x233; void*x234; void*x235; void*x236; in void*x237; void*x238; void*x239; double x240; void*x241; void*x242; void*x243; long x244; void*x245; out void*x246; in void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; }*)roadLayer;
- (void)setTrafficTile:(id)arg1;
- (id)trafficTile;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;

@end
