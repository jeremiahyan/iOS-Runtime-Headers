/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKDebugModel : VKModelObject <VKMapLayer> {
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _debugLinesRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _debugPointsRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > > { 
            struct FragmentedPool<ggl::DebugPoints::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _debugPointsShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _debugRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > > { 
            struct FragmentedPool<ggl::Debug::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _debugShaderSetupPool;
    float _fontSize;
    BOOL _geocentric;
    BOOL _needsReset;
    struct shared_ptr<ggl::Debug::BaseMesh> { 
        struct BaseMesh {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _unitRectMesh;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL geocentric;
@property (readonly) unsigned int hash;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)appendDebugTileCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; short x29; void*x30; void*x31; void*x32; const void*x33; void*x34; void*x35; BOOL x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; BOOL x46; void*x47; out void*x48; void*x49; void*x50; void*x51; void*x52; const void*x53; void*x54; void*x55; short x56; void*x57; short x58; void*x59; void*x60; void*x61; double x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; int x70; void*x71; const void*x72; void*x73; void*x74; void*x75; void*x76; in void*x77; short x78; void*x79; int x80; void*x81; void*x82; void*x83; in void*x84; void*x85; void*x86; double x87; void*x88; void*x89; void*x90; long x91; void*x92; out void*x93; in void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; short x101; void*x102; void*x103; void*x104; double x105; void*x106; SEL x107; void*x108; SEL x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; SEL x117; void*x118; SEL x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void x133; void*x134; void*x135; void*x136; long x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; BOOL x145; void*x146; out void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; const void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; short x161; void*x162; short x163; void*x164; SEL x165; void*x166; SEL x167; void*x168; void*x169; void*x170; const void*x171; out void*x172; void*x173; void*x174; void*x175; void*x176; const void*x177; void*x178; void*x179; void*x180; void*x181; unsigned int x182; void*x183; long doublex184; void*x185; void*x186; void*x187; void*x188; void*x189; short x190; void*x191; void*x192; void*x193; double x194; void*x195; SEL x196; void*x197; SEL x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; SEL x206; void*x207; SEL x208; void*x209; void*x210; void*x211; void*x212; void*x213; void x214; void*x215; void*x216; void*x217; long x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; short x238; void*x239; short x240; void*x241; SEL x242; void*x243; SEL x244; void*x245; void*x246; void*x247; const void*x248; out void*x249; void*x250; void*x251; void*x252; void*x253; const void*x254; void*x255; void*x256; void*x257; void*x258; unsigned int x259; void*x260; long doublex261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; short x269; void*x270; short x271; void*x272; SEL x273; void*x274; SEL x275; void*x276; unsigned short x277; void*x278; void*x279; void*x280; void*x281; void*x282; const void*x283; short x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; short x300; void*x301; short x302; void*x303; SEL x304; void*x305; SEL x306; void*x307; unsigned short x308; void*x309; void*x310; void*x311; void*x312; void*x313; long x314; void*x315; void*x316; void*x317; long doublex318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; int x330; void*x331; const void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; short x343; void*x344; void*x345; void*x346; double x347; void*x348; SEL x349; void*x350; SEL x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; SEL x359; void*x360; SEL x361; void*x362; long x363; void*x364; void*x365; void*x366; short x367; void*x368; short x369; void*x370; void*x371; void*x372; void*x373; void*x374; short x375; void*x376; short x377; void*x378; SEL x379; void*x380; SEL x381; void*x382; void*x383; void*x384; short x385; void*x386; void*x387; void*x388; const void*x389; void*x390; void*x391; BOOL x392; void*x393; void*x394; void*x395; void*x396; void*x397; void x398; void*x399; void*x400; void*x401; BOOL x402; void*x403; void*x404; void*x405; out void*x406; const void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; long x414; void*x415; SEL x416; void*x417; SEL x418; void*x419; void*x420; void*x421; void*x422; void*x423; in void*x424; double x425; void*x426; void*x427; void*x428; const void*x429; unsigned int x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; char *x440; void*x441; void*x442; void*x443; void*x444; void*x445; short x446; void*x447; void*x448; void*x449; double x450; void*x451; SEL x452; void*x453; SEL x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; SEL x462; void*x463; SEL x464; void*x465; void*x466; void*x467; long x468; void*x469; long x470; void*x471; out void*x472; BOOL x473; void*x474; void*x475; void*x476; void*x477; void*x478; out void*x479; const void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; long x487; void*x488; SEL x489; void*x490; SEL x491; void*x492; void*x493; void*x494; void*x495; void*x496; in void*x497; double x498; void*x499; void*x500; void*x501; const void*x502; unsigned int x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; char *x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; struct x523; void*x524; void*x525; void*x526; short x527; void*x528; void*x529; void*x530; const void*x531; void*x532; void*x533; BOOL x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; in void*x544; double x545; void*x546; void*x547; void*x548; const void*x549; unsigned int x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; struct x560; void*x561; }*)arg1 forMapTile:(id)arg2 fromLayer:(unsigned long long)arg3 withContext:(id)arg4 withConsole:(struct DebugConsole { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; struct Matrix<float, 2, 1> { float x_3_1_1[2]; } x3; struct Matrix<float, 2, 1> { float x_4_1_1[2]; } x4; unsigned int x5; struct RenderItem {} *x6; struct unique_ptr<ggl::DataWrite<ggl::ColoredText::MyVertexElement>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::MyVertexElement> > > { struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::MyVertexElement> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::MyVertexElement> > > { struct DataWrite<ggl::ColoredText::MyVertexElement> {} *x_1_2_1; } x_7_1_1; } x7; unsigned int x8; struct Matrix<float, 2, 1> {} *x9; struct Matrix<unsigned char, 4, 1> { unsigned char x_10_1_1[4]; } x10; struct Matrix<unsigned char, 4, 1> { unsigned char x_11_1_1[4]; } x11; float x12; }*)arg5;
- (void)dealloc;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (void)flushPools;
- (BOOL)geocentric;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (void)reset;
- (void)resetPools:(id)arg1;
- (void)setGeocentric:(BOOL)arg1;
- (BOOL)shouldLayoutWithoutStyleManager;
- (struct shared_ptr<ggl::Debug::BaseMesh> { struct BaseMesh {} *x1; struct __shared_weak_count {} *x2; })unitRectMesh;

@end
