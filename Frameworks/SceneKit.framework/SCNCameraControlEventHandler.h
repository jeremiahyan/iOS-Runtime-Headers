/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@interface SCNCameraControlEventHandler : SCNEventHandler {
    unsigned int _alternateMode;
    unsigned int _automaticCameraTarget;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    } _cameraTarget;
    void_clickOrigin;
    id _dReserved;
    SCNNode *_freeViewCameraNode;
    float _friction;
    unsigned int _gimbalLockMode;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    } _gimbalLockVector;
    unsigned int _hasCheckedIfViewingAnObject;
    unsigned int _inertia;
    unsigned int _inertiaRunning;
    struct CGPoint { 
        float x; 
        float y; 
    } _inertiaVelocity;
    union C3DMatrix4x4 { 
        float components[16]; 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*m[4]; 
    } _initialMatrix;
    union C3DMatrix4x4 { 
        float components[16]; 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*m[4]; 
    } _initialMatrixForRoll;
    struct CGPoint { 
        float x; 
        float y; 
    } _initialPoint;
    float _initialZoom;
    BOOL _isDraggingWithOneFinger;
    unsigned int _isViewedObjectSphereComputed;
    unsigned int _isViewingAnObject;
    int _lastGestureFingerCount;
    double _lastSimulationTime;
    int _mode;
    float _originalFovX;
    float _originalFovY;
    float _originalOrthoScale;
    UIGestureRecognizer *_panGesture;
    UIGestureRecognizer *_pinchGesture;
    UIGestureRecognizer *_pressGesture;
    float _roll;
    UIGestureRecognizer *_rotateGesture;
    float _savedZfar;
    float _savedZnear;
    int _stickyAxis;
    UIGestureRecognizer *_tapGesture;
    struct CGPoint { 
        float x; 
        float y; 
    } _totalDragWithInertia;
    void_upDir;
    unsigned int _upDirIsSet;
    struct C3DSphere { 
        /* Warning: Unrecognized filer type: '}' using 'void*' */ void*vector; 
    } _viewedObjectSphere;
    float _zoomFactor;
}

@property BOOL automaticCameraTarget;
@property struct SCNVector3 { float x1; float x2; float x3; } cameraTarget;
@property BOOL enableInertia;
@property float friction;
@property BOOL gimbalLockMode;
@property struct SCNVector3 { float x1; float x2; float x3; } gimbalLockVector;
@property int stickyAxis;

- (void)_beginTranslateAtLocation:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)_freeCameraActivated;
- (void)_handleDoubleTap:(id)arg1;
- (void)_handlePan:(id)arg1;
- (void)_handlePinch:(id)arg1;
- (void)_handlePress:(id)arg1;
- (void)_handleRotation:(id)arg1;
- (void)_installFreeViewCameraIfNeeded;
- (void)_onInertiaTimer;
- (void)_prepareFreeViewCamera;
- (void)_resetFreeViewCamera;
- (void)_rotateWithDrag:(struct CGPoint { float x1; float x2; })arg1 mode:(int)arg2 stickyAxis:(int)arg3;
- (void)_startBrowsingIfNeeded:(struct CGPoint { float x1; float x2; })arg1;
- (void)_stopInertiaIfNeeded;
- (void)_switchToFreeViewCamera;
- (void)_translateTo:(struct CGPoint { float x1; float x2; })arg1;
- (float)_translationCoef;
- (BOOL)automaticCameraTarget;
- (void)beginGesture:(id)arg1;
- (void)cameraDidChange;
- (struct SCNVector3 { float x1; float x2; float x3; })cameraTarget;
- (void)cameraWillChange;
- (BOOL)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode { }*)arg1 sphere:(struct C3DSphere { }*)arg2;
- (void)dealloc;
- (BOOL)enableInertia;
- (void)endDraggingWithVelocity:(struct CGPoint { float x1; float x2; })arg1;
- (float)friction;
- (void)frontVector;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureRecognizers;
- (BOOL)gimbalLockMode;
- (struct SCNVector3 { float x1; float x2; float x3; })gimbalLockVector;
- (id)init;
- (BOOL)isViewingAnObject;
- (void)panWithGestureRecognizer:(id)arg1;
- (void)pinchWithGestureRecognizer:(id)arg1;
- (void)rotateOf:(float)arg1;
- (void)rotateWithGestureRecognizer:(id)arg1;
- (void)rotateWithVector:(void *)arg1 mode:(void *)arg2; // needs 2 arg types, found 1: int
- (void)sceneDidChange;
- (void)sceneWillChange;
- (void)setAutomaticCameraTarget:(BOOL)arg1;
- (void)setCameraTarget:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)setEnableInertia:(BOOL)arg1;
- (void)setFriction:(float)arg1;
- (void)setGimbalLockMode:(BOOL)arg1;
- (void)setGimbalLockVector:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)setStickyAxis:(int)arg1;
- (void)setZoomFactor:(float)arg1;
- (int)stickyAxis;
- (void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3;
- (void)updateCameraTargetIfNeeded;
- (void)viewWillDraw;
- (struct C3DSphere { })viewedObjectSphere;
- (BOOL)wantsRedraw;
- (void)zoomBy:(float)arg1;
- (void)zoomBy:(float)arg1 animate:(BOOL)arg2;
- (float)zoomFactor;

@end
