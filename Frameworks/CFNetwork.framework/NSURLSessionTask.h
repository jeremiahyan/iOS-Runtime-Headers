/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@interface NSURLSessionTask : NSObject <NSCopying> {
    unsigned long __allowedProtocolTypes;
    bool __allowsCellular;
    NSDictionary *__backgroundTaskTimingData;
    NSString *__boundInterfaceIdentifier;
    int __cachePolicy;
    struct _CFURLCache { } *__cfCache;
    struct OpaqueCFHTTPCookieStorage { } *__cfCookies;
    struct _CFURLCredentialStorage { } *__cfCreds;
    struct _CFHSTSPolicy { } *__cfHSTS;
    BOOL __connectionIsCellular;
    NSValue *__connectionPropertyDuet;
    NSArray *__contentDispositionFallbackArray;
    int __cookieAcceptPolicy;
    struct _CFURLRequest { } *__currentCFURLRequest;
    bool __disallowCellular;
    long long __expectedWorkload;
    NSURL *__ledBellyFallbackURL;
    NSString *__ledBellyServiceIdentifier;
    NSDictionary *__legacySocketStreamProperties;
    int __networkServiceType;
    struct __PerformanceTiming { } *__performanceTiming;
    unsigned int __powerAssertion;
    bool __preventsIdleSystemSleep;
    float __priorityHint;
    long long __priorityValue;
    BOOL __prohibitAuthUI;
    id __protocolForTask;
    NSDictionary *__proxySettings;
    long __requestPriority;
    bool __shouldHandleCookies;
    bool __shouldPipelineHTTP;
    bool __shouldSkipPipelineProbe;
    BOOL __shouldSkipPreferredClientCertificateLookup;
    bool __shouldUsePipelineHeuristics;
    NSDictionary *__sslSettings;
    BOOL __strictContentLength;
    long long __suspensionThreshhold;
    double __timeWindowDelay;
    double __timeWindowDuration;
    double __timeoutInterval;
    NSString *__uniqueIdentifier;
    long long _countOfBytesExpectedToReceive;
    long long _countOfBytesExpectedToSend;
    long long _countOfBytesReceived;
    long long _countOfBytesSent;
    NSError *_error;
    NSURLRequest *_originalRequest;
    NSURLResponse *_response;
    NSURLSession *_session;
    double _startTime;
    int _state;
    NSString *_taskDescription;
    unsigned int _taskIdentifier;
    NSObject<OS_dispatch_queue> *_workQueue;
}

@property unsigned long _allowedProtocolTypes;
@property bool _allowsCellular;
@property (nonatomic, copy) NSDictionary *_backgroundTaskTimingData;
@property (retain) NSString *_boundInterfaceIdentifier;
@property int _cachePolicy;
@property (retain) struct _CFURLCache { }*_cfCache;
@property (retain) struct OpaqueCFHTTPCookieStorage { }*_cfCookies;
@property (retain) struct _CFURLCredentialStorage { }*_cfCreds;
@property (retain) struct _CFHSTSPolicy { }*_cfHSTS;
@property (setter=_setConnectionIsCellular:) BOOL _connectionIsCellular;
@property (copy) NSValue *_connectionPropertyDuet;
@property (retain) NSArray *_contentDispositionFallbackArray;
@property int _cookieAcceptPolicy;
@property (retain) struct _CFURLRequest { }*_currentCFURLRequest;
@property bool _disallowCellular;
@property long long _expectedWorkload;
@property (copy) NSURL *_ledBellyFallbackURL;
@property (copy) NSString *_ledBellyServiceIdentifier;
@property (retain) NSDictionary *_legacySocketStreamProperties;
@property int _networkServiceType;
@property (nonatomic) struct __PerformanceTiming { }*_performanceTiming;
@property unsigned int _powerAssertion;
@property bool _preventsIdleSystemSleep;
@property long long _priority;
@property float _priorityHint;
@property long long _priorityValue;
@property BOOL _prohibitAuthUI;
@property (nonatomic) id _protocolForTask;
@property (retain) NSDictionary *_proxySettings;
@property long _requestPriority;
@property bool _shouldHandleCookies;
@property bool _shouldPipelineHTTP;
@property bool _shouldSkipPipelineProbe;
@property BOOL _shouldSkipPreferredClientCertificateLookup;
@property bool _shouldUsePipelineHeuristics;
@property (retain) NSDictionary *_sslSettings;
@property BOOL _strictContentLength;
@property long long _suspensionThreshhold;
@property double _timeWindowDelay;
@property double _timeWindowDuration;
@property double _timeoutInterval;
@property (copy) NSString *_uniqueIdentifier;
@property long long countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend;
@property long long countOfBytesReceived;
@property long long countOfBytesSent;
@property (readonly, copy) NSURLRequest *currentRequest;
@property (readonly, retain) NSURL *currentRequest_URL;
@property (copy) NSError *error;
@property (copy) NSURLRequest *originalRequest;
@property (readonly, retain) NSURL *originalRequest_mainDocumentURL;
@property float priority;
@property (copy) NSURLResponse *response;
@property (retain) NSURLSession *session;
@property double startTime;
@property int state;
@property (copy) NSString *taskDescription;
@property unsigned int taskIdentifier;
@property NSObject<OS_dispatch_queue> *workQueue;

+ (BOOL)supportsSecureCoding;
+ (id)taskForWrappedRequest:(id)arg1;

- (unsigned long)_allowedProtocolTypes;
- (bool)_allowsCellular;
- (id)_backgroundTaskTimingData;
- (id)_boundInterfaceIdentifier;
- (int)_cachePolicy;
- (struct _CFURLCache { }*)_cfCache;
- (struct OpaqueCFHTTPCookieStorage { }*)_cfCookies;
- (struct _CFURLCredentialStorage { }*)_cfCreds;
- (struct _CFHSTSPolicy { }*)_cfHSTS;
- (BOOL)_connectionIsCellular;
- (id)_connectionPropertyDuet;
- (id)_contentDispositionFallbackArray;
- (int)_cookieAcceptPolicy;
- (struct _CFURLRequest { }*)_copyCurrentCFURLRequest;
- (struct _CFHSTSPolicy { }*)_copyHSTSPolicy;
- (struct __CFHTTPMessage { }*)_copyHTTPMessage;
- (struct _CFURLRequest { }*)_copyOriginalCFURLRequest;
- (struct __CFDictionary { }*)_copySocketStreamProperties;
- (struct __CFDictionary { }*)_copySocketStreamProperties0;
- (const struct XCookieStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCookieStorage;
- (const struct XCredentialStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCredentialStorage;
- (const struct XURLCache { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXURLCache;
- (struct _CFURLRequest { }*)_currentCFURLRequest;
- (bool)_disallowCellular;
- (long long)_expectedWorkload;
- (void)_initializeTimingDataWithSessionConfiguration:(id)arg1;
- (id)_ledBellyFallbackURL;
- (id)_ledBellyServiceIdentifier;
- (id)_legacySocketStreamProperties;
- (int)_networkServiceType;
- (void)_onqueue_adjustPriorityHint:(float)arg1;
- (void)_onqueue_releasePowerAsssertion;
- (struct __PerformanceTiming { }*)_performanceTiming;
- (unsigned int)_powerAssertion;
- (bool)_preventsIdleSystemSleep;
- (long long)_priority;
- (float)_priorityHint;
- (long long)_priorityValue;
- (BOOL)_prohibitAuthUI;
- (id)_protocolForTask;
- (id)_proxySettings;
- (void)_releasePreventIdleSleepAssertionIfAppropriate;
- (long)_requestPriority;
- (void)_setConnectionIsCellular:(BOOL)arg1;
- (void)_setExplicitCookieStorage:(struct OpaqueCFHTTPCookieStorage { }*)arg1;
- (void)_setExplicitStorageSession:(struct __CFURLStorageSession { }*)arg1;
- (void)_setSocketProperties:(struct __CFDictionary { }*)arg1 connectionProperties:(struct __CFDictionary { }*)arg2;
- (bool)_shouldHandleCookies;
- (bool)_shouldPipelineHTTP;
- (bool)_shouldSkipPipelineProbe;
- (BOOL)_shouldSkipPreferredClientCertificateLookup;
- (bool)_shouldUsePipelineHeuristics;
- (id)_sslSettings;
- (BOOL)_strictContentLength;
- (long long)_suspensionThreshhold;
- (void)_takePreventIdleSleepAssertionIfAppropriate;
- (double)_timeWindowDelay;
- (double)_timeWindowDuration;
- (double)_timeoutInterval;
- (id)_timingData;
- (id)_uniqueIdentifier;
- (void)adjustConditionalConnectionProperties:(struct __CFDictionary { }*)arg1;
- (void)cancel;
- (void)cleanupAndBreakCycles;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)countOfBytesExpectedToReceive;
- (long long)countOfBytesExpectedToSend;
- (long long)countOfBytesReceived;
- (long long)countOfBytesSent;
- (id)currentRequest;
- (id)currentRequest_URL;
- (void)dealloc;
- (id)description;
- (id)error;
- (BOOL)headerWasAddedDuringCanonicalization:(id)arg1;
- (id)initWithOriginalRequest:(id)arg1 updatedRequest:(id)arg2 ident:(unsigned int)arg3 session:(id)arg4;
- (id)initWithTask:(id)arg1;
- (id)originalRequest;
- (id)originalRequest_mainDocumentURL;
- (float)priority;
- (id)response;
- (void)resume;
- (id)session;
- (void)setCountOfBytesExpectedToReceive:(long long)arg1;
- (void)setCountOfBytesExpectedToSend:(long long)arg1;
- (void)setCountOfBytesReceived:(long long)arg1;
- (void)setCountOfBytesSent:(long long)arg1;
- (void)setError:(id)arg1;
- (void)setOriginalRequest:(id)arg1;
- (void)setPriority:(float)arg1;
- (void)setResponse:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setStartTime:(double)arg1;
- (void)setState:(int)arg1;
- (void)setTaskDescription:(id)arg1;
- (void)setTaskIdentifier:(unsigned int)arg1;
- (void)setWorkQueue:(id)arg1;
- (void)set_allowedProtocolTypes:(unsigned long)arg1;
- (void)set_allowsCellular:(bool)arg1;
- (void)set_backgroundTaskTimingData:(id)arg1;
- (void)set_boundInterfaceIdentifier:(id)arg1;
- (void)set_cachePolicy:(int)arg1;
- (void)set_cfCache:(struct _CFURLCache { }*)arg1;
- (void)set_cfCookies:(struct OpaqueCFHTTPCookieStorage { }*)arg1;
- (void)set_cfCreds:(struct _CFURLCredentialStorage { }*)arg1;
- (void)set_cfHSTS:(struct _CFHSTSPolicy { }*)arg1;
- (void)set_connectionPropertyDuet:(id)arg1;
- (void)set_contentDispositionFallbackArray:(id)arg1;
- (void)set_cookieAcceptPolicy:(int)arg1;
- (void)set_currentCFURLRequest:(struct _CFURLRequest { }*)arg1;
- (void)set_disallowCellular:(bool)arg1;
- (void)set_expectedWorkload:(long long)arg1;
- (void)set_ledBellyFallbackURL:(id)arg1;
- (void)set_ledBellyServiceIdentifier:(id)arg1;
- (void)set_legacySocketStreamProperties:(id)arg1;
- (void)set_networkServiceType:(int)arg1;
- (void)set_performanceTiming:(struct __PerformanceTiming { }*)arg1;
- (void)set_powerAssertion:(unsigned int)arg1;
- (void)set_preventsIdleSystemSleep:(bool)arg1;
- (void)set_priority:(long long)arg1;
- (void)set_priorityHint:(float)arg1;
- (void)set_priorityValue:(long long)arg1;
- (void)set_prohibitAuthUI:(BOOL)arg1;
- (void)set_protocolForTask:(id)arg1;
- (void)set_proxySettings:(id)arg1;
- (void)set_requestPriority:(long)arg1;
- (void)set_shouldHandleCookies:(bool)arg1;
- (void)set_shouldPipelineHTTP:(bool)arg1;
- (void)set_shouldSkipPipelineProbe:(bool)arg1;
- (void)set_shouldSkipPreferredClientCertificateLookup:(BOOL)arg1;
- (void)set_shouldUsePipelineHeuristics:(bool)arg1;
- (void)set_sslSettings:(id)arg1;
- (void)set_strictContentLength:(BOOL)arg1;
- (void)set_suspensionThreshhold:(long long)arg1;
- (void)set_timeWindowDelay:(double)arg1;
- (void)set_timeWindowDuration:(double)arg1;
- (void)set_timeoutInterval:(double)arg1;
- (void)set_uniqueIdentifier:(id)arg1;
- (bool)shouldHandleCookiesAndSchemeIsAppropriate;
- (double)startTime;
- (int)state;
- (void)suspend;
- (id)taskDescription;
- (unsigned int)taskIdentifier;
- (void)updateCurrentRequest:(id)arg1;
- (id)workQueue;

@end
