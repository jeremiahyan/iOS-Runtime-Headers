/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@interface NSURLStorage_CacheClient : NSObject <NSURLStorageCacheClient> {
    struct __CFURLCache { int (**x1)(); int *x2; id x3; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x4; id x5; bool x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; unsigned int x15; struct __CFString {} *x16; struct __CFString {} *x17; struct __CFString {} *x18; char *x19; bool x20; bool x21; struct sqlite3 {} *x22; struct sqlite3 {} *x23; struct _opaque_pthread_mutex_t { long x_24_1_1; BOOL x_24_1_2[40]; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct CoreLockable {} *x26; struct CoreLockable {} *x27; struct CoreLockable {} *x28; struct sqlite3_stmt {} *x29; struct sqlite3_stmt {} *x30; struct sqlite3_stmt {} *x31; struct sqlite3_stmt {} *x32; struct sqlite3_stmt {} *x33; struct sqlite3_stmt {} *x34; struct sqlite3_stmt {} *x35; struct sqlite3_stmt {} *x36; struct sqlite3_stmt {} *x37; struct sqlite3_stmt {} *x38; struct sqlite3_stmt {} *x39; struct sqlite3_stmt {} *x40; struct sqlite3_stmt {} *x41; struct sqlite3_stmt {} *x42; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_43_1_1; } x43; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_44_1_1; unsigned int x_44_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_44_1_3; } x44; struct __CFRunLoopSource {} *x45; struct _opaque_pthread_t {} *x46; struct _opaque_pthread_mutex_t { long x_47_1_1; BOOL x_47_1_2[40]; } x47; struct _opaque_pthread_mutex_t { long x_48_1_1; BOOL x_48_1_2[40]; } x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; struct _opaque_pthread_mutex_t { long x_50_1_1; BOOL x_50_1_2[40]; } x50; struct _opaque_pthread_mutex_t { long x_51_1_1; BOOL x_51_1_2[40]; } x51; struct __CFArray {} *x52; struct __CFArray {} *x53; bool x54; bool x55; id x56; bool x57; id x58; struct _CFURLCache {} x59; bool x60; bool x61; long x62; long x63; bool x64; struct __asl_object_s {} *x65; unsigned short x66; long x67; bool x68; bool x69; bool x70; bool x71; int x72; bool x73; bool x74; int x75; id x76; struct __CFSet {} x77; struct __CFArray {} *x78; int x79; id x80; void*x81; out void*x82; void*x83; long long x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; const void*x91; void*x92; double x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; long x103; BOOL x104[40]; } *_cfCache;
    NSXPCInterface *_netStoreInterface;
    NSXPCConnection *_networkStorageConnection;
    BOOL _networkStorageConnectionInterrupted;
    NSString *_path;
    NSData *_sandboxExtensionToken;
    int _storageSize;
    NSString *_taskManagerIdentifier;
}

@property BOOL networkStorageConnectionInterrupted;

- (void)_associateCFURLCacheInstance:(struct __CFURLCache { int (**x1)(); int *x2; id x3; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x4; id x5; bool x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; unsigned int x15; struct __CFString {} *x16; struct __CFString {} *x17; struct __CFString {} *x18; char *x19; bool x20; bool x21; struct sqlite3 {} *x22; struct sqlite3 {} *x23; struct _opaque_pthread_mutex_t { long x_24_1_1; BOOL x_24_1_2[40]; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct CoreLockable {} *x26; struct CoreLockable {} *x27; struct CoreLockable {} *x28; struct sqlite3_stmt {} *x29; struct sqlite3_stmt {} *x30; struct sqlite3_stmt {} *x31; struct sqlite3_stmt {} *x32; struct sqlite3_stmt {} *x33; struct sqlite3_stmt {} *x34; struct sqlite3_stmt {} *x35; struct sqlite3_stmt {} *x36; struct sqlite3_stmt {} *x37; struct sqlite3_stmt {} *x38; struct sqlite3_stmt {} *x39; struct sqlite3_stmt {} *x40; struct sqlite3_stmt {} *x41; struct sqlite3_stmt {} *x42; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_43_1_1; } x43; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_44_1_1; unsigned int x_44_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_44_1_3; } x44; struct __CFRunLoopSource {} *x45; struct _opaque_pthread_t {} *x46; struct _opaque_pthread_mutex_t { long x_47_1_1; BOOL x_47_1_2[40]; } x47; struct _opaque_pthread_mutex_t { long x_48_1_1; BOOL x_48_1_2[40]; } x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; struct _opaque_pthread_mutex_t { long x_50_1_1; BOOL x_50_1_2[40]; } x50; struct _opaque_pthread_mutex_t { long x_51_1_1; BOOL x_51_1_2[40]; } x51; struct __CFArray {} *x52; struct __CFArray {} *x53; bool x54; bool x55; id x56; bool x57; id x58; struct _CFURLCache {} x59; bool x60; bool x61; long x62; long x63; bool x64; struct __asl_object_s {} *x65; unsigned short x66; long x67; bool x68; bool x69; bool x70; bool x71; int x72; bool x73; bool x74; int x75; id x76; struct __CFSet {} x77; struct __CFArray {} *x78; int x79; id x80; void*x81; out void*x82; void*x83; long long x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; const void*x91; void*x92; double x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; long x103; BOOL x104[40]; }*)arg1;
- (void)_disassociateCFURLCacheInstance;
- (void)_reconnectWithStorageServer;
- (void)addCachedResponse:(id)arg1 key:(id)arg2;
- (void)addCachedResponseWithDictionary:(id)arg1 key:(id)arg2;
- (void)cachedResponseForKey:(id)arg1 handler:(id /* block */)arg2;
- (void)copyAllPartitionNamesWithCompletionHandler:(id /* block */)arg1;
- (void)copyHostNamesForOptionalPartition:(id)arg1 handler:(id /* block */)arg2;
- (BOOL)createStorageTaskManagerForPath:(id)arg1 maxSize:(int)arg2 extension:(id)arg3 withIdentifier:(id)arg4;
- (int)currentDiskUsage;
- (void)dealloc;
- (void)deleteAllHostNames:(id)arg1 forOptionalPartition:(id)arg2;
- (void)deleteAllResponses;
- (void)deleteResponseForRequestWithKey:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)deleteResponsesSinceDate:(id)arg1;
- (BOOL)ensureNetworkStorageDaemonConnection;
- (id)getPath;
- (id)initWithCache:(struct __CFURLCache { int (**x1)(); int *x2; id x3; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x4; id x5; bool x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; unsigned int x15; struct __CFString {} *x16; struct __CFString {} *x17; struct __CFString {} *x18; char *x19; bool x20; bool x21; struct sqlite3 {} *x22; struct sqlite3 {} *x23; struct _opaque_pthread_mutex_t { long x_24_1_1; BOOL x_24_1_2[40]; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct CoreLockable {} *x26; struct CoreLockable {} *x27; struct CoreLockable {} *x28; struct sqlite3_stmt {} *x29; struct sqlite3_stmt {} *x30; struct sqlite3_stmt {} *x31; struct sqlite3_stmt {} *x32; struct sqlite3_stmt {} *x33; struct sqlite3_stmt {} *x34; struct sqlite3_stmt {} *x35; struct sqlite3_stmt {} *x36; struct sqlite3_stmt {} *x37; struct sqlite3_stmt {} *x38; struct sqlite3_stmt {} *x39; struct sqlite3_stmt {} *x40; struct sqlite3_stmt {} *x41; struct sqlite3_stmt {} *x42; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_43_1_1; } x43; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_44_1_1; unsigned int x_44_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_44_1_3; } x44; struct __CFRunLoopSource {} *x45; struct _opaque_pthread_t {} *x46; struct _opaque_pthread_mutex_t { long x_47_1_1; BOOL x_47_1_2[40]; } x47; struct _opaque_pthread_mutex_t { long x_48_1_1; BOOL x_48_1_2[40]; } x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; struct _opaque_pthread_mutex_t { long x_50_1_1; BOOL x_50_1_2[40]; } x50; struct _opaque_pthread_mutex_t { long x_51_1_1; BOOL x_51_1_2[40]; } x51; struct __CFArray {} *x52; struct __CFArray {} *x53; bool x54; bool x55; id x56; bool x57; id x58; struct _CFURLCache {} x59; bool x60; bool x61; long x62; long x63; bool x64; struct __asl_object_s {} *x65; unsigned short x66; long x67; bool x68; bool x69; bool x70; bool x71; int x72; bool x73; bool x74; int x75; id x76; struct __CFSet {} x77; struct __CFArray {} *x78; int x79; id x80; void*x81; out void*x82; void*x83; long long x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; const void*x91; void*x92; double x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; long x103; BOOL x104[40]; }*)arg1;
- (BOOL)networkStorageConnectionInterrupted;
- (void)notifyCachedURLResponseBecameFileBacked:(id)arg1 filePath:(id)arg2 forUUID:(id)arg3;
- (void)setMaxSize:(int)arg1;
- (void)setMinSizeForVMCachedResource:(int)arg1;
- (void)setNetworkStorageConnectionInterrupted:(BOOL)arg1;

@end
