/* Generated by RuntimeBrowser
   Image: /usr/lib/libmecabra.dylib
 */

@interface MecabraDatabaseListener : NSObject {
    struct LearningDictionary { unsigned char x1; int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; struct LearningDictionaryTrie {} *x4; struct LearningDictionaryDatabase {} *x5; struct vector<EntryField, std::__1::allocator<EntryField> > { struct { /* ? */ } *x_6_1_1; struct { /* ? */ } *x_6_1_2; struct __compressed_pair<EntryField *, std::__1::allocator<EntryField> > { struct { /* ? */ } *x_3_2_1; } x_6_1_3; } x6; void *x7; int x8; int x9; int x10; } *target;
}

- (void)dealloc;
- (id)initWithLearningDictionary:(struct LearningDictionary { unsigned char x1; int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; struct LearningDictionaryTrie {} *x4; struct LearningDictionaryDatabase {} *x5; struct vector<EntryField, std::__1::allocator<EntryField> > { struct { /* ? */ } *x_6_1_1; struct { /* ? */ } *x_6_1_2; struct __compressed_pair<EntryField *, std::__1::allocator<EntryField> > { struct { /* ? */ } *x_3_2_1; } x_6_1_3; } x6; void *x7; int x8; int x9; int x10; }*)arg1;
- (void)resetDatabase;

@end
